{"ast":null,"code":"/* import { createStore } from 'redux'; */\n\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = true;\n    }\n  }\n});\n\n/* \r\nold redux   \r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === 'increment') {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n  if (action.type === 'increase') {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === 'decrement') {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if(action.type === 'toggle'){\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: !state.showCounter\r\n      };\r\n  }\r\n\r\n  return state;\r\n};\r\n */\n/* const store = createStore(counterReducer); */\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"sources":["C:/Users/engin/Desktop/react/react-course/redux-basics/src/store/index.js"],"sourcesContent":["/* import { createStore } from 'redux'; */\r\n\r\nimport {createSlice, configureStore} from '@reduxjs/toolkit'\r\n\r\nconst initialCounterState = { counter: 0  , showCounter : true}\r\n\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            state.counter++\r\n        },\r\n        decrement(state) {\r\n            state.counter--\r\n        },\r\n        increase (state, action) {\r\n            state.counter = state.counter + action.payload\r\n        },\r\n        toggleCounter (state) {\r\n            state.showCounter = !state.showCounter\r\n        }\r\n    }\r\n})\r\n\r\nconst initialAuthState = {isAuthenticated: false}\r\n\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialAuthState,\r\n    reducers : {\r\n        login(state) \r\n        {\r\n            state.isAuthenticated= true\r\n        },\r\n        logout(state) {\r\n            state.isAuthenticated= true\r\n        }\r\n    }\r\n})\r\n\r\n/* \r\nold redux   \r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === 'increment') {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n  if (action.type === 'increase') {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === 'decrement') {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if(action.type === 'toggle'){\r\n    return {\r\n        counter: state.counter,\r\n        showCounter: !state.showCounter\r\n      };\r\n  }\r\n\r\n  return state;\r\n};\r\n */\r\n/* const store = createStore(counterReducer); */\r\nconst store = configureStore({\r\n    reducer: {\r\n        counter : counterSlice.reducer,\r\n        auth: authSlice.reducer\r\n    }\r\n})\r\n\r\nexport const counterActions = counterSlice.actions\r\n\r\nexport default store;"],"mappings":"AAAA;;AAEA,SAAQA,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAIC,WAAW,EAAG;AAAI,CAAC;AAG/D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAAS,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQ,CAAEF,KAAK,EAAEG,MAAM,EAAE;MACrBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAa,CAAEL,KAAK,EAAE;MAClBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EAACC,eAAe,EAAE;AAAK,CAAC;AAGjD,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAG;IACPW,KAAK,CAACT,KAAK,EACX;MACIA,KAAK,CAACO,eAAe,GAAE,IAAI;IAC/B,CAAC;IACDG,MAAM,CAACV,KAAK,EAAE;MACVA,KAAK,CAACO,eAAe,GAAE,IAAI;IAC/B;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;EACzBqB,OAAO,EAAE;IACLnB,OAAO,EAAGE,YAAY,CAACiB,OAAO;IAC9BC,IAAI,EAAEL,SAAS,CAACI;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAElD,eAAeJ,KAAK"},"metadata":{},"sourceType":"module"}